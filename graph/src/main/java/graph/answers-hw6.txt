## CSE 331 HW6 Questions

NOTE: This file is used as part of HW6, and is not due as part of the HW5
submission. You may leave it blank for HW5.

## Part 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of nodes and a collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of nodes, whether there 
       is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).

A: Advantage:    Collections are easier to implement.
   Disadvantage: Collections do not maintain an order.
B: Advantage:    It reduces memory usage by storing information in two-dimensional arrays.
                 Adding new nodes and searching through neighbor nodes takes less runtime.
   Disadvantage: Finding a specific edge from A to B can take longer time, for it has to search
                 through the list of all edges.
C: Advantage:    Adjacency matrices are faster in computing whether there is connection from A to B.
   Disadvantage: The space complexity of adjacency matrices is n * n, and higher runtime when
                 adding new nodes and searching through neighbor nodes.



2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.

I chose an adjacency list, because I want to specify no duplicate labels with the same source
 and destination, but collections/sets allow duplicates; I also want to store information
 of each edge (weight of the edge), but an adjacency matrix stores only the number of edges.
 An adjacency list can work with both of these cases, which is why I chose it.



## Part 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.

- Added extra tests for add and remove nodes to make sure of no unexpected errors
- Used getLabels method in tests to check the exact edges from A to B besides checking contains
- Updated exception tests for add and remove nodes to not only catch exceptions but make sure
  they were thrown
- Added more cases for add and remove edge to include both directions operate properly
- Added more cases for list parents and children to include both directions
- Added exception tests for list parents and list children methods to make sure exceptions are
  thrown as expected.


2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.

Yes, there are some changes.
I changed to allow self pointing edge (source = destination) because it's an additional functionality.
Some exceptions are reduced:
- I changed to allow null or non-existent nodes for both remove methods, since these methods are
  called to remove elements and the job is already done if nodes are null or don't exist.
- To improve convenience, when adding edges to non-existent nodes, I changed to add the nodes
  to the map for the clients instead of throwing exceptions.
- Null check for contains method is also eliminated because it is not necessary.


